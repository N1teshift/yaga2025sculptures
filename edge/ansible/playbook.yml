---
- name: Configure Raspberry Pi Sculpture Nodes
  hosts: sculptures
  become: yes
  vars:
    sculpture_dir: /opt/sculpture-system

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade installed packages
      apt:
        upgrade: dist

    - name: Install required packages
      apt:
        name:
          - darkice
          - mpv
          - python3-paho-mqtt
          - rsync
          - alsa-utils
          - python3-pip
          - git
          - pulsemixer
          - python3-rpi.gpio
        state: present

    - name: Install PulseAudio (PulseAudio mode only)
      apt:
        name: pulseaudio
        state: present
      when: audio_backend == 'pulse'

    - name: Disable WiFi power saving
      copy:
        dest: /etc/NetworkManager/conf.d/wifi-powersave.conf
        content: |
          [connection]
          wifi.powersave = 2
        owner: root
        group: root
        mode: '0644'
      notify: Restart NetworkManager

    - name: Detect firmware config path
      stat:
        path: /boot/firmware/config.txt
      register: firmware_cfg

    - name: Set boot config path
      set_fact:
        boot_cfg: >-
          {{ '/boot/firmware/config.txt'
             if firmware_cfg.stat.exists
             else '/boot/config.txt' }}

    - name: Enable IQaudIO codec overlay
      lineinfile:
        path: "{{ boot_cfg }}"
        regexp: '^dtoverlay=iqaudio-codec'
        line: 'dtoverlay=iqaudio-codec'
      register: overlay

    - name: Enable I2S for audio HAT
      lineinfile:
        path: "{{ boot_cfg }}"
        regexp: '^#? *dtparam=i2s=on'
        line: 'dtparam=i2s=on'
        state: present
      register: i2s_on

    - name: Disable built-in audio to prevent I2S conflicts
      lineinfile:
        path: "{{ boot_cfg }}"
        regexp: '^dtparam=audio='
        line: 'dtparam=audio=off'
        state: present
      register: audio_off

    - name: Reboot if audio configuration changed
      reboot:
        reboot_timeout: 300
      when: overlay.changed or i2s_on.changed or audio_off.changed

    - name: Create sculpture system directory
      file:
        path: "{{ sculpture_dir }}"
        state: directory
        mode: '0755'

    - name: Create playlists subdirectory
      file:
        path: "{{ sculpture_dir }}/playlists"
        state: directory
        owner: pi
        group: audio
        mode: '0755'

    - name: Check if ffmpeg is available on the control node
      local_action:
        module: ansible.builtin.command
        cmd: which ffmpeg
      become: no
      run_once: true
      register: ffmpeg_check
      failed_when: false

    - name: Fail with helpful message if ffmpeg is not installed
      fail:
        msg: |
          ffmpeg is not installed on the control node. Please install it with:
          
          On Ubuntu/Debian: sudo apt update && sudo apt install ffmpeg
          On WSL Ubuntu: sudo apt update && sudo apt install ffmpeg
          
          Then re-run the playbook.
      when: ffmpeg_check.rc != 0
      run_once: true

    - name: Create a temporary local directory for converted loops
      local_action:
        module: ansible.builtin.file
        path: /tmp/converted_loops
        state: directory
      become: no
      run_once: true

    - name: Convert loop files to the correct format locally
      local_action:
        module: ansible.builtin.shell
        cmd: 'for f in ../../samples/*.wav; do ffmpeg -y -i "$f" -ac {{ audio_channels }} -ar {{ audio_sample_rate }} "/tmp/converted_loops/$(basename "$f")"; done'
      become: no
      run_once: true

    - name: Copy the CONVERTED loop files to the edge device
      ansible.builtin.copy:
        src: /tmp/converted_loops/
        dest: /opt/sculpture-system/
        owner: pi
        group: audio
        mode: '0644'

    - name: Clean up temporary local directory
      local_action:
        module: ansible.builtin.file
        path: /tmp/converted_loops
        state: absent
      become: no
      run_once: true

    - name: Template darkice configuration
      template:
        src: ../darkice/darkice.cfg
        dest: "{{ sculpture_dir }}/darkice.cfg"
        mode: '0644'

    - name: Configure PulseAudio for the target sample rate
      lineinfile:
        path: /etc/pulse/daemon.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^; default-sample-rate = .*', line: 'default-sample-rate = {{ audio_sample_rate }}' }
        - { regexp: '^; alternate-sample-rate = .*', line: 'alternate-sample-rate = {{ audio_sample_rate }}' }
      notify: Restart pulseaudio
      when: audio_backend == 'pulse'

    - name: Configure ALSA for shared access (ALSA mode only)
      template:
        src: templates/asound.conf.j2
        dest: /etc/asound.conf
        owner: root
        group: root
        mode: '0644'
      when: audio_backend == 'alsa'

    - name: Ensure custom ALSA config is absent (PulseAudio mode only)
      ansible.builtin.file:
        path: /etc/asound.conf
        state: absent
      when: audio_backend == 'pulse'

    - name: Find IQaudIO sound card number
      ansible.builtin.shell: "grep 'IQaudIOCODEC' /proc/asound/cards | awk '{print $1}'"
      register: iqaudio_card_num_result
      changed_when: false
      failed_when: iqaudio_card_num_result.stdout == ""

    - name: Set IQaudIO card number fact
      ansible.builtin.set_fact:
        iqaudio_card_num: "{{ iqaudio_card_num_result.stdout }}"

    - name: Configure ALSA mixer for microphone input
      ansible.builtin.shell: |
        current=$(amixer -c {{ iqaudio_card_num }} sget '{{ item.control }}' 2>/dev/null || echo "not_found")
        if ! echo "$current" | grep -q "{{ item.value }}"; then
          amixer -c {{ iqaudio_card_num }} sset '{{ item.control }}' {{ item.value }} >/dev/null
          echo "changed"
        else
          echo "ok"
        fi
      loop:
        - { control: 'Mic 2', value: '5 on' }
        - { control: 'Mixin Left Mic 2', value: 'on' }
        - { control: 'Mixin Right Mic 2', value: 'on' }
        - { control: 'ADC', value: '114 on' }
        - { control: 'Mixin PGA', value: '7 on' }
      register: mic_mixer_result
      changed_when: mic_mixer_result.stdout == "changed"
      notify: Save ALSA state

    - name: Configure ALSA mixer for speaker output
      ansible.builtin.shell: |
        current=$(amixer -c {{ iqaudio_card_num }} sget '{{ item.control }}' 2>/dev/null || echo "not_found")
        if ! echo "$current" | grep -q "{{ item.value }}"; then
          amixer -c {{ iqaudio_card_num }} sset '{{ item.control }}' {{ item.value }} >/dev/null
          echo "changed"
        else
          echo "ok"
        fi
      loop:
        - { control: 'Lineout', value: 'on' }
        - { control: 'Headphone', value: 'on' }
        - { control: 'Mixout Left DAC Left', value: 'on' }
        - { control: 'Mixout Right DAC Right', value: 'on' }
      register: speaker_mixer_result
      changed_when: speaker_mixer_result.stdout == "changed"
      notify: Save ALSA state

    - name: Install sculpture system files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: templates/pi-agent.py.j2, dest: "{{ sculpture_dir }}/pi-agent.py", mode: '0755' }
        - { src: templates/audio_manager.py.j2, dest: "{{ sculpture_dir }}/audio_manager.py", mode: '0644' }
        - { src: templates/system_manager.py.j2, dest: "{{ sculpture_dir }}/system_manager.py", mode: '0644' }
      notify: Restart pi-agent

    - name: Copy sculpture system modules and scripts
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: ../scripts/status_collector.py, dest: "{{ sculpture_dir }}/status_collector.py", mode: '0644' }
        - { src: ../scripts/audio_diagnostics.sh, dest: "{{ sculpture_dir }}/audio_diagnostics.sh", mode: '0755' }
        - { src: ../scripts/hardware_audio_test.sh, dest: "{{ sculpture_dir }}/hardware_audio_test.sh", mode: '0755' }
      notify: Restart pi-agent

    - name: Install systemd services
      template:
        src: "{{ item.src }}"
        dest: "/etc/systemd/system/{{ item.name }}.service"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: ../systemd/darkice.service.j2, name: darkice }
        - { src: ../systemd/player-live.service.j2, name: player-live }
        - { src: ../systemd/player-loop.service.j2, name: player-loop }
        - { src: ../systemd/pi-agent.service.j2, name: pi-agent }
      notify: 
        - Restart darkice
        - Restart player-live
        - Restart player-loop
        - Restart pi-agent

    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop:
        - darkice
        - player-live
        - player-loop
        - pi-agent

    - name: Ensure player-loop is disabled by default
      systemd:
        name: player-loop.service
        enabled: no
        state: stopped

    - name: Enable PulseAudio TCP access for SSH monitoring
      lineinfile:
        path: /etc/pulse/default.pa
        regexp: '^load-module module-native-protocol-tcp'
        line: 'load-module module-native-protocol-tcp auth-anonymous=1'
        state: present
      notify: Restart pulseaudio
      when: audio_backend == 'pulse'

    - name: Grant pi-agent limited sudo access for service management
      template:
        src: templates/pi-agent-sudoers.j2
        dest: "/etc/sudoers.d/pi-agent-sudo"
        owner: root
        group: root
        mode: "0440"
        validate: 'visudo -cf %s'

  handlers:
    - name: Restart NetworkManager
      systemd:
        name: NetworkManager
        state: restarted

    - name: Restart pulseaudio
      systemd:
        name: pulseaudio
        state: restarted
        scope: user
      become: no

    - name: Restart darkice
      systemd:
        name: darkice
        state: restarted

    - name: Restart player-live
      systemd:
        name: player-live
        state: restarted

    - name: Restart player-loop
      systemd:
        name: player-loop
        state: restarted

    - name: Restart pi-agent
      systemd:
        name: pi-agent
        
        state: restarted

    - name: Save ALSA state
      ansible.builtin.command: alsactl store
