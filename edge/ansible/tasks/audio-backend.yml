---
- name: Audio Backend Configuration
  hosts: sculptures
  become: yes
  vars:
    sculpture_dir: /opt/sculpture-system
  vars_files:
    - ../../audio_config.yml
    - ../../playlists.yml

  tasks:
    - name: Install PulseAudio (PulseAudio mode only)
      apt:
        name: pulseaudio
        state: present
      when: audio_backend == 'pulse'
      tags: [packages, pulse]

    - name: Template darkice configuration
      template:
        src: ../darkice/darkice.cfg
        dest: "{{ sculpture_dir }}/darkice.cfg"
        mode: '0644'
      tags: [config]

    - name: Configure PulseAudio for the target sample rate and underrun prevention
      lineinfile:
        path: /etc/pulse/daemon.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^; default-sample-rate = .*', line: 'default-sample-rate = {{ audio_sample_rate }}' }
        - { regexp: '^; alternate-sample-rate = .*', line: 'alternate-sample-rate = {{ audio_sample_rate }}' }
        - { regexp: '^; default-sample-format = .*', line: 'default-sample-format = s16le' }
        - { regexp: '^; default-fragments = .*', line: 'default-fragments = 8' }
        - { regexp: '^; default-fragment-size-msec = .*', line: 'default-fragment-size-msec = {{ pulse_latency_msec }}' }
        - { regexp: '^; high-priority = .*', line: 'high-priority = yes' }
        - { regexp: '^; nice-level = .*', line: 'nice-level = -11' }
        - { regexp: '^; realtime-scheduling = .*', line: 'realtime-scheduling = yes' }
        - { regexp: '^; realtime-priority = .*', line: 'realtime-priority = 9' }
        - { regexp: '^; avoid-resampling = .*', line: 'avoid-resampling = yes' }
      notify: Restart pulseaudio
      when: audio_backend == 'pulse'
      tags: [config, pulse]

    - name: Configure ALSA for shared access (ALSA mode only)
      template:
        src: ../pi-agent/asound.conf.j2
        dest: /etc/asound.conf
        owner: root
        group: root
        mode: '0644'
      when: audio_backend == 'alsa'
      tags: [config, alsa]

    - name: Ensure custom ALSA config is absent (PulseAudio mode only)
      ansible.builtin.file:
        path: /etc/asound.conf
        state: absent
      when: audio_backend == 'pulse'
      tags: [config, pulse]

    - name: Find IQaudIO sound card number
      ansible.builtin.shell: "grep 'IQaudIOCODEC' /proc/asound/cards | awk '{print $1}'"
      register: iqaudio_card_num_result
      changed_when: false
      failed_when: iqaudio_card_num_result.stdout == ""
      tags: [hardware]

    - name: Set IQaudIO card number fact
      ansible.builtin.set_fact:
        iqaudio_card_num: "{{ iqaudio_card_num_result.stdout }}"
      tags: [hardware]

    - name: Configure ALSA mixer for microphone input
      ansible.builtin.shell: |
        current=$(amixer -c {{ iqaudio_card_num }} sget '{{ item.control }}' 2>/dev/null || echo "not_found")
        if ! echo "$current" | grep -q "{{ item.value }}"; then
          amixer -c {{ iqaudio_card_num }} sset '{{ item.control }}' {{ item.value }} >/dev/null
          echo "changed"
        else
          echo "ok"
        fi
      loop:
        - { control: 'Mic 2', value: '5 on' }
        - { control: 'Mixin Left Mic 2', value: 'on' }
        - { control: 'Mixin Right Mic 2', value: 'on' }
        - { control: 'ADC', value: '100 on' }
        - { control: 'Mixin PGA', value: '7 on' }
      register: mic_mixer_result
      changed_when: mic_mixer_result.stdout == "changed"
      notify: Save ALSA state
      when: audio_backend == 'alsa'
      tags: [hardware, mixer]

    - name: Configure ALSA mixer for speaker output
      ansible.builtin.shell: |
        current=$(amixer -c {{ iqaudio_card_num }} sget '{{ item.control }}' 2>/dev/null || echo "not_found")
        if ! echo "$current" | grep -q "{{ item.value }}"; then
          amixer -c {{ iqaudio_card_num }} sset '{{ item.control }}' {{ item.value }} >/dev/null
          echo "changed"
        else
          echo "ok"
        fi
      loop:
        - { control: 'Lineout', value: 'on' }
        - { control: 'Headphone', value: 'on' }
        - { control: 'Mixout Left DAC Left', value: 'on' }
        - { control: 'Mixout Right DAC Right', value: 'on' }
      register: speaker_mixer_result
      changed_when: speaker_mixer_result.stdout == "changed"
      notify: Save ALSA state
      when: audio_backend == 'alsa'
      tags: [hardware, mixer]

    - name: Enable PulseAudio TCP access for SSH monitoring
      lineinfile:
        path: /etc/pulse/default.pa
        regexp: '^load-module module-native-protocol-tcp'
        line: 'load-module module-native-protocol-tcp auth-anonymous=1'
        state: present
      notify: Restart pulseaudio
      when: audio_backend == 'pulse'
      tags: [config, pulse, monitoring]

  handlers:
    - name: Restart pulseaudio
      systemd:
        name: pulseaudio
        state: restarted
        scope: user
      become: no

    - name: Save ALSA state
      ansible.builtin.command: alsactl store 