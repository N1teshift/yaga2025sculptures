#!/usr/bin/env python3

import subprocess
import logging
import pwd
import os
from pathlib import Path
import re

logger = logging.getLogger(__name__)

def get_pactl_env():
    """Returns a suitable environment for running pactl from a systemd service."""
    try:
        # Get the UID of the 'pi' user, which is needed to find the PulseAudio socket
        pi_uid = pwd.getpwnam('pi').pw_uid
        env = os.environ.copy()
        env['XDG_RUNTIME_DIR'] = f'/run/user/{pi_uid}'
        return env
    except KeyError:
        logger.warning("Could not find user 'pi' to set XDG_RUNTIME_DIR for pactl. Audio control will likely fail.")
        return os.environ.copy()
    except Exception as e:
        logger.error(f"An unexpected error occurred while creating pactl environment: {e}")
        return os.environ.copy()

def get_alsa_control_range(card, control):
    """Get the actual min/max range for an ALSA control."""
    try:
        result = subprocess.run(
            ['amixer', '-c', card, 'get', control],
            capture_output=True, text=True, check=True
        )
        # Look for "Limits: X - Y" pattern (with optional Playback/Capture prefix)
        limits_match = re.search(r'Limits:\s*(?:Playback\s+|Capture\s+)?(\d+)\s*-\s*(\d+)', result.stdout)
        if limits_match:
            min_val = int(limits_match.group(1))
            max_val = int(limits_match.group(2))
            logger.info(f"Found {control} range: {min_val}-{max_val}")
            return min_val, max_val
        else:
            logger.warning(f"Could not parse range for {control}, amixer output: {result.stdout[:200]}...")
            # Use known ranges for IQaudIOCODEC controls
            if 'Lineout' in control:
                return 0, 63  # Known range for IQaudIOCODEC Lineout
            elif 'Headphone' in control:
                return 0, 63  # Known range for IQaudIOCODEC Headphone
            elif 'ADC' in control:
                return 0, 127  # Known range for IQaudIOCODEC ADC
            elif 'Mic' in control:
                return 0, 7   # Known range for IQaudIOCODEC Mic controls
            else:
                return 0, 100  # Generic fallback
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to get range for {control}: {e}")
        # Use known ranges for IQaudIOCODEC controls
        if 'Lineout' in control:
            return 0, 63  # Known range for IQaudIOCODEC Lineout
        elif 'Headphone' in control:
            return 0, 63  # Known range for IQaudIOCODEC Headphone
        elif 'ADC' in control:
            return 0, 127  # Known range for IQaudIOCODEC ADC
        elif 'Mic' in control:
            return 0, 7   # Known range for IQaudIOCODEC Mic controls
        else:
            return 0, 100  # Generic fallback

class AudioManager:
    """Handles all audio-related operations for the sculpture system."""
    
    def __init__(self, audio_backend='pulse', audio_config_path=None):
        self.audio_backend = audio_backend
        # Audio configuration from Ansible templates (all.yml)
        self.audio_config = {
            'samplerate': '{{ audio_sample_rate }}',
            'device': '{{ mpv_audio_device }}',
            'format': '{{ mpv_audio_format }}'
        }
        self.is_muted = False
        self._last_mute_error = None
        
        # Cache control ranges for ALSA backend
        self._lineout_range = None
        self._headphone_range = None
        
        logger.info(f"AudioManager initialized in '{self.audio_backend}' mode with config: {self.audio_config}")
        
    def _get_lineout_range(self):
        """Get and cache the Lineout control range."""
        if self._lineout_range is None:
            self._lineout_range = get_alsa_control_range('IQaudIOCODEC', 'Lineout')
        return self._lineout_range
    
    def _get_headphone_range(self):
        """Get and cache the Headphone control range."""
        if self._headphone_range is None:
            self._headphone_range = get_alsa_control_range('IQaudIOCODEC', 'Headphone')
        return self._headphone_range
    
    def set_volume(self, volume):
        """Set master volume (0-1 range) using the appropriate backend."""
        try:
            logger.info(f"Setting volume to {volume:.3f} using {self.audio_backend} backend")
            if self.audio_backend == 'pulse':
                # PulseAudio uses percentage for volume control
                volume_percent = int(volume * 100)
                volume_percent = max(0, min(100, volume_percent))  # Clamp to 0-100
                cmd = ['pactl', 'set-sink-volume', 'alsa_output.platform-soc_sound.stereo-fallback', f'{volume_percent}%']
                env = get_pactl_env()
                logger.info(f"PulseAudio volume set to {volume_percent}%")
            else: # alsa
                # For IQaudIOCODEC, use Headphone control which actually affects the audio output
                min_val, max_val = self._get_headphone_range()
                # Map 0-1 range to actual ALSA control range
                alsa_value = int(min_val + (volume * (max_val - min_val)))
                alsa_value = max(min_val, min(max_val, alsa_value))  # Clamp to valid range
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'sset', 'Headphone', str(alsa_value)]
                logger.info(f"ALSA Headphone volume set to {alsa_value}/{max_val} ({volume:.1%})")
            
            subprocess.run(cmd, check=True, capture_output=True, env=env if self.audio_backend == 'pulse' else None)
            self.current_volume = volume
            logger.info(f"Volume successfully set to {volume:.3f}")
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to set volume: {e}")
            raise
    
    def set_mute(self, mute):
        """Set mute state using the appropriate backend."""
        self.is_muted = bool(mute)  # Optimistically update state
        try:
            logger.info(f"Setting mute to {self.is_muted} using {self.audio_backend} backend")

            if self.audio_backend == 'pulse':
                mute_flag = '1' if self.is_muted else '0'
                cmd = ['pactl', 'set-sink-mute', 'alsa_output.platform-soc_sound.stereo-fallback', mute_flag]
                env = get_pactl_env()
            else: # alsa
                mute_flag = 'off' if self.is_muted else 'on'
                # Use Headphone control since that's what affects the actual audio output
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'set', 'Headphone', mute_flag]
                env = os.environ.copy()

            subprocess.run(cmd, check=True, env=env)
            # Clear previous error on success
            self._last_mute_error = None
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.error(f"Failed to set mute using {self.audio_backend}: {e} - state may not be in sync.")
            raise
    
    def get_mute_status(self, current_mode):
        """Get current mute status from the system."""
        try:
            # Only check for mute status if we're in a mode that produces audio
            if current_mode != "idle":
                if self.audio_backend == 'pulse':
                    mute_result = subprocess.run(
                        ['pactl', 'get-sink-mute', 'alsa_output.platform-soc_sound.stereo-fallback'],
                        capture_output=True, text=True, check=True, env=get_pactl_env()
                    )
                    # Output is "Mute: yes" or "Mute: no"
                    self.is_muted = 'yes' in mute_result.stdout.lower()
                else: # alsa
                    # Check ALSA mixer mute status using Headphone control
                    mute_result = subprocess.run(
                        ['amixer', '-c', 'IQaudIOCODEC', 'get', 'Headphone'],
                        capture_output=True, text=True, check=True
                    )
                    # Look for [off] in the output to determine mute status
                    self.is_muted = '[off]' in mute_result.stdout
                # Clear previous error on success
                self._last_mute_error = None
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            # Log warning only once if sink is not found, to avoid spamming logs
            if self._last_mute_error is None:
                logger.warning(f"Could not get mute status: {e}. Using last known value. Further warnings will be suppressed.")
                self._last_mute_error = str(e)
        
        return self.is_muted
    
    def get_microphone_level(self):
        """Get microphone input level (peak) in dB."""
        mic_level = -60.0  # Default to silence
        try:
            if self.audio_backend == 'pulse':
                mic_output = subprocess.check_output(
                    "timeout 0.1s parec --raw --device=@DEFAULT_SOURCE@ | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{print 20*(log( (max+0.0001) / 32767) / log(10))}'",
                    shell=True,
                    timeout=0.5,
                    stderr=subprocess.PIPE,
                    env=get_pactl_env()
                )
                mic_level = float(mic_output.strip())
            else: # alsa
                # Use arecord with ALSA to capture brief audio and measure level
                mic_output = subprocess.check_output(
                    "timeout 0.2s arecord -D mono_capture -f S16_LE -r 48000 -c 1 -t raw 2>/dev/null | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{if(max>0){print 20*log(max/32767)/log(10)} else {print -60}}'",
                    shell=True,
                    timeout=0.7,
                    stderr=subprocess.PIPE
                )
                mic_level = float(mic_output.strip())
            
            if mic_level < -60 or mic_level > 0:
                mic_level = -60.0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, ValueError) as e:
            if isinstance(e, subprocess.CalledProcessError):
                logger.warning(f"Mic level check failed with error: {e.stderr.decode('utf-8').strip() if hasattr(e, 'stderr') and e.stderr else 'Unknown error'}")
            pass  # Keep default on error
        return mic_level
    
    def get_output_level(self):
        """Get speaker output level (peak) in dB."""
        output_level = -60.0  # Default to silence
        try:
            if self.audio_backend == 'pulse':
                output_output = subprocess.check_output(
                    "timeout 1s parec --raw --device=alsa_output.platform-soc_sound.stereo-fallback.monitor | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{if(max>0){print 20*log(max/32767)/log(10)} else {print -60}}'",
                    shell=True,
                    timeout=2,
                    stderr=subprocess.PIPE,
                    env=get_pactl_env()
                )
                output_level = float(output_output.strip())
            else: # alsa
                # Try to monitor actual output using ALSA loopback or fallback to MPV detection
                try:
                    # Method 1: Try using the loopback monitor device if available
                    output_output = subprocess.check_output(
                        "timeout 0.1s arecord -D monitor -f S16_LE -r 48000 -c 1 -t raw 2>/dev/null | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{if(max>0){print 20*log(max/32767)/log(10)} else {print -60}}'",
                        shell=True,
                        timeout=0.5,
                        stderr=subprocess.PIPE
                    )
                    output_level = float(output_output.strip())
                    logger.debug(f"ALSA monitor output level: {output_level:.1f}dB")
                except (subprocess.CalledProcessError, subprocess.TimeoutExpired, ValueError):
                    # Method 2: Fallback to MPV process detection with volume scaling
                    try:
                        mpv_check = subprocess.run(['pgrep', '-f', 'mpv'], capture_output=True)
                        if mpv_check.returncode == 0:
                            # Estimate output level based on current headphone volume setting
                            try:
                                vol_result = subprocess.run(
                                    ['amixer', '-c', 'IQaudIOCODEC', 'get', 'Headphone'],
                                    capture_output=True, text=True, check=True
                                )
                                # Parse volume percentage from amixer output
                                vol_match = re.search(r'\[(\d+)%\]', vol_result.stdout)
                                if vol_match:
                                    vol_percent = int(vol_match.group(1))
                                    # Convert volume percentage to estimated dB level
                                    # 100% = -6dB, 50% = -18dB, 0% = -60dB (logarithmic scale)
                                    if vol_percent > 0:
                                        output_level = -60 + (54 * (vol_percent / 100) ** 0.5)  # Square root scaling
                                    else:
                                        output_level = -60.0
                                    logger.debug(f"Estimated output level from volume {vol_percent}%: {output_level:.1f}dB")
                                else:
                                    output_level = -25.0  # Default when MPV active but can't read volume
                            except:
                                output_level = -25.0  # Default when MPV active
                        else:
                            output_level = -60.0  # Silence when no player
                    except:
                        output_level = -60.0
            
            # Clamp to reasonable range
            if output_level < -60 or output_level > 0:
                output_level = max(-60.0, min(0.0, output_level))
                
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, ValueError) as e:
            if isinstance(e, subprocess.CalledProcessError):
                logger.warning(f"Output level check failed with error: {e.stderr.decode('utf-8').strip() if hasattr(e, 'stderr') and e.stderr else 'Unknown error'}")
            pass  # Keep default on error
        return output_level
    
    def set_capture(self, capture):
        """Set capture (microphone) level (0-1 range) using the appropriate backend."""
        try:
            logger.info(f"Setting capture to {capture:.3f} using {self.audio_backend} backend")
            if self.audio_backend == 'pulse':
                # PulseAudio uses percentage for volume control
                capture_percent = int(capture * 100)
                capture_percent = max(0, min(100, capture_percent))  # Clamp to 0-100
                cmd = ['pactl', 'set-source-volume', 'alsa_input.platform-soc_sound.stereo-fallback', f'{capture_percent}%']
                env = get_pactl_env()
                logger.info(f"PulseAudio capture set to {capture_percent}%")
            else: # alsa
                # Control Mic 2 (actual microphone sensitivity) instead of ADC
                # Mic 2 has range 0-7 on IQaudIOCODEC
                mic2_min, mic2_max = 0, 7  # Known range for Mic 2
                mic2_value = int(mic2_min + (capture * (mic2_max - mic2_min)))
                mic2_value = max(mic2_min, min(mic2_max, mic2_value))  # Clamp to actual range
                
                # Set Mic 2 (microphone sensitivity)
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'set', 'Mic 2', str(mic2_value)]
                env = os.environ.copy()
                logger.info(f"ALSA Mic 2 set to {mic2_value}/{mic2_max} (input: {capture:.3f}, range: {mic2_min}-{mic2_max})")
                
                # Also ensure ADC is at optimal level (80% of its range = ~100/127)
                # This happens once per capture adjustment to maintain good signal level
                try:
                    adc_optimal = 100  # 80% of 127 ≈ 100
                    subprocess.run(['amixer', '-c', 'IQaudIOCODEC', 'set', 'ADC', str(adc_optimal)], 
                                 check=True, env=env)
                    logger.debug(f"ADC maintained at optimal level: {adc_optimal}/127")
                except subprocess.CalledProcessError as e:
                    logger.warning(f"Failed to set optimal ADC level: {e}")
                
            subprocess.run(cmd, check=True, env=env)
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.error(f"Failed to set capture using {self.audio_backend}: {e}")
            raise 