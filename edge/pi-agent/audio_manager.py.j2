#!/usr/bin/env python3

import subprocess
import logging
import pwd
import os
from pathlib import Path

logger = logging.getLogger(__name__)

def get_pactl_env():
    """Returns a suitable environment for running pactl from a systemd service."""
    try:
        # Get the UID of the 'pi' user, which is needed to find the PulseAudio socket
        pi_uid = pwd.getpwnam('pi').pw_uid
        env = os.environ.copy()
        env['XDG_RUNTIME_DIR'] = f'/run/user/{pi_uid}'
        return env
    except KeyError:
        logger.warning("Could not find user 'pi' to set XDG_RUNTIME_DIR for pactl. Audio control will likely fail.")
        return os.environ.copy()
    except Exception as e:
        logger.error(f"An unexpected error occurred while creating pactl environment: {e}")
        return os.environ.copy()

class AudioManager:
    """Handles all audio-related operations for the sculpture system."""
    
    def __init__(self, audio_backend='pulse', audio_config_path=None):
        self.audio_backend = audio_backend
        # Audio configuration from Ansible templates (all.yml)
        self.audio_config = {
            'samplerate': '{{ audio_sample_rate }}',
            'device': '{{ mpv_audio_device }}',
            'format': '{{ mpv_audio_format }}'
        }
        self.is_muted = False
        self._last_mute_error = None
        logger.info(f"AudioManager initialized in '{self.audio_backend}' mode with config: {self.audio_config}")
        
    def set_volume(self, volume):
        """Set volume level (0-1 range) using the appropriate backend."""
        try:
            volume_percent = int(volume * 100)
            volume_percent = max(0, min(100, volume_percent))  # Clamp to 0-100
            
            logger.info(f"Setting volume to {volume_percent}% using {self.audio_backend} backend")

            if self.audio_backend == 'pulse':
                cmd = ['pactl', 'set-sink-volume', 'alsa_output.platform-soc_sound.stereo-fallback', f'{volume_percent}%']
                env = get_pactl_env()
            else: # alsa
                # Use card name instead of number for better reliability
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'set', 'Lineout', f'{volume_percent}%']
                env = os.environ.copy()

            subprocess.run(cmd, check=True, env=env)
            
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.error(f"Failed to set volume using {self.audio_backend}: {e}")
            raise
    
    def set_mute(self, mute):
        """Set mute state using the appropriate backend."""
        self.is_muted = bool(mute)  # Optimistically update state
        try:
            logger.info(f"Setting mute to {self.is_muted} using {self.audio_backend} backend")

            if self.audio_backend == 'pulse':
                mute_flag = '1' if self.is_muted else '0'
                cmd = ['pactl', 'set-sink-mute', 'alsa_output.platform-soc_sound.stereo-fallback', mute_flag]
                env = get_pactl_env()
            else: # alsa
                mute_flag = 'off' if self.is_muted else 'on'
                # Use card name for reliability
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'set', 'Lineout', mute_flag]
                env = os.environ.copy()

            subprocess.run(cmd, check=True, env=env)
            # Clear previous error on success
            self._last_mute_error = None
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.error(f"Failed to set mute using {self.audio_backend}: {e} - state may not be in sync.")
            raise
    
    def get_mute_status(self, current_mode):
        """Get current mute status from the system."""
        try:
            # Only check for mute status if we're in a mode that produces audio
            if current_mode != "idle":
                if self.audio_backend == 'pulse':
                    mute_result = subprocess.run(
                        ['pactl', 'get-sink-mute', 'alsa_output.platform-soc_sound.stereo-fallback'],
                        capture_output=True, text=True, check=True, env=get_pactl_env()
                    )
                    # Output is "Mute: yes" or "Mute: no"
                    self.is_muted = 'yes' in mute_result.stdout.lower()
                else: # alsa
                    # Check ALSA mixer mute status
                    mute_result = subprocess.run(
                        ['amixer', '-c', 'IQaudIOCODEC', 'get', 'Lineout'],
                        capture_output=True, text=True, check=True
                    )
                    # Look for [off] in the output to determine mute status
                    self.is_muted = '[off]' in mute_result.stdout
                # Clear previous error on success
                self._last_mute_error = None
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            # Log warning only once if sink is not found, to avoid spamming logs
            if self._last_mute_error is None:
                logger.warning(f"Could not get mute status: {e}. Using last known value. Further warnings will be suppressed.")
                self._last_mute_error = str(e)
        
        return self.is_muted
    
    def get_microphone_level(self):
        """Get microphone input level (peak) in dB."""
        mic_level = -60.0  # Default to silence
        try:
            if self.audio_backend == 'pulse':
                mic_output = subprocess.check_output(
                    "timeout 0.1s parec --raw --device=@DEFAULT_SOURCE@ | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{print 20*(log( (max+0.0001) / 32767) / log(10))}'",
                    shell=True,
                    timeout=0.5,
                    stderr=subprocess.PIPE,
                    env=get_pactl_env()
                )
                mic_level = float(mic_output.strip())
            else: # alsa
                # Use arecord with ALSA to capture brief audio and measure level
                mic_output = subprocess.check_output(
                    "timeout 0.1s arecord -D mono_capture -f S16_LE -r 48000 -c 1 -t raw 2>/dev/null | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{if(max>0){print 20*log(max/32767)/log(10)} else {print -60}}'",
                    shell=True,
                    timeout=0.5,
                    stderr=subprocess.PIPE
                )
                mic_level = float(mic_output.strip())
            
            if mic_level < -60 or mic_level > 0:
                mic_level = -60.0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, ValueError) as e:
            if isinstance(e, subprocess.CalledProcessError):
                logger.warning(f"Mic level check failed with error: {e.stderr.decode('utf-8').strip() if hasattr(e, 'stderr') and e.stderr else 'Unknown error'}")
            pass  # Keep default on error
        return mic_level
    
    def get_output_level(self):
        """Get speaker output level (peak) in dB."""
        output_level = -60.0  # Default to silence
        try:
            if self.audio_backend == 'pulse':
                output_output = subprocess.check_output(
                    "timeout 1s parec --raw --device=alsa_output.platform-soc_sound.stereo-fallback.monitor | od -t d2 -w2 | awk 'BEGIN{max=0} {val=$2; if(val<0) val=-val; if(val>max)max=val} END{if(max>0){print 20*log(max/32767)/log(10)} else {print -60}}'",
                    shell=True,
                    timeout=2,
                    stderr=subprocess.PIPE,
                    env=get_pactl_env()
                )
                output_level = float(output_output.strip())
            else: # alsa
                # With ALSA, we can't easily monitor output in real-time without additional setup
                # For now, return a reasonable default. Could be enhanced with loopback device monitoring
                # or by checking if audio is currently playing
                try:
                    # Check if MPV is running and outputting audio
                    mpv_check = subprocess.run(['pgrep', '-f', 'mpv'], capture_output=True)
                    if mpv_check.returncode == 0:
                        output_level = -20.0  # Assume reasonable level when MPV is active
                    else:
                        output_level = -60.0  # Silence when no player
                except:
                    output_level = -60.0
            
            if output_level < -60 or output_level > 0:
                output_level = -60.0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, ValueError) as e:
            if isinstance(e, subprocess.CalledProcessError):
                logger.warning(f"Output level check failed with error: {e.stderr.decode('utf-8').strip() if hasattr(e, 'stderr') and e.stderr else 'Unknown error'}")
            pass  # Keep default on error
        return output_level
    
    def set_capture(self, capture):
        """Set capture (microphone) level (0-1 range) using the appropriate backend."""
        try:
            capture_percent = int(capture * 100)
            capture_percent = max(0, min(100, capture_percent))  # Clamp to 0-100
            logger.info(f"Setting capture to {capture_percent}% using {self.audio_backend} backend")
            if self.audio_backend == 'pulse':
                # This assumes the default source is correct
                cmd = ['pactl', 'set-source-volume', 'alsa_input.platform-soc_sound.stereo-fallback', f'{capture_percent}%']
                env = get_pactl_env()
            else: # alsa
                # Use card name and correct capture control
                cmd = ['amixer', '-c', 'IQaudIOCODEC', 'set', 'ADC', f'{capture_percent}%']
                env = os.environ.copy()
            subprocess.run(cmd, check=True, env=env)
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.error(f"Failed to set capture using {self.audio_backend}: {e}")
            raise 