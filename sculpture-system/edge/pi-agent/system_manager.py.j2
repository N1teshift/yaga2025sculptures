#!/usr/bin/env python3

import logging
from service_manager import ServiceManager
from playlist_manager import PlaylistManager
from file_utils import ensure_directory

logger = logging.getLogger(__name__)

class SystemManager:
    """Handles system service management and mode switching."""
    
    def __init__(self, sculpture_dir='/opt/sculpture-system', predefined_playlists=None):
        self.sculpture_dir = sculpture_dir
        self.predefined_playlists = predefined_playlists or []
        self.service_manager = ServiceManager()
        self.playlist_manager = PlaylistManager(sculpture_dir, self.predefined_playlists)
        ensure_directory(self.sculpture_dir)
        self.current_mode = "live"
        
    def switch_to_live_mode(self):
        """Switch to live mode - streaming and playback from server."""
        self.current_mode = "live"
        self.service_manager.switch_to_live_mode()
    
    def switch_to_local_mode(self, track=None, audio_config=None):
        """Switch to local mode - playback from local files or playlists."""
        self.current_mode = "local"
        self.service_manager.switch_to_local_mode(track, audio_config, self.playlist_manager.update_loop_content)
    
    def stop_all_services(self):
        """Stop all audio-related services (emergency stop)."""
        self.current_mode = "idle"
        self.service_manager.stop_all_services()
    
    def restart_darkice(self):
        """Restart the darkice service."""
        self.service_manager.restart_darkice()
    
    def restart_all_services(self):
        """Restart all sculpture services in the correct order."""
        self.service_manager.restart_all_services(self.current_mode)
    
    def get_available_tracks(self):
        """Get list of available audio tracks and playlists."""
        return self.playlist_manager.get_available_tracks()
    
    def update_loop_content(self, content_name, audio_config=None):
        """Update the player-loop service to use a track or playlist."""
        self.playlist_manager.update_loop_content(content_name, audio_config) 