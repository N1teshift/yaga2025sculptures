{
    "id": "plan_highlighter",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Plan Highlighter",
    "func": "// Extract plan from payload\nvar currentPlan = msg.payload.plan;\nif (!currentPlan) return null; // Exit if no plan in payload\n\n// Store the current plan in flow context for persistence\nflow.set('currentPlan', currentPlan);\n\n// Send the current plan to all button state nodes\n// Each output gets the same message with the current plan\nvar stateMsgs = Array(7).fill({payload: currentPlan});\n\nreturn stateMsgs;",
    "outputs": 7,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 370,
    "y": 200,
    "wires": [
        [
            "plan_a1_state"
        ],
        [
            "plan_a2_state"
        ],
        [
            "plan_b1_state"
        ],
        [
            "plan_b2_state"
        ],
        [
            "plan_b3_state"
        ],
        [
            "plan_c_state"
        ],
        [
            "plan_d_state"
        ]
    ]
},
{
    "id": "plan_dashboard_connect",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Send Plan Highlight on Connect",
    "func": "// On dashboard connect, re-broadcast the current plan highlight\nif (msg.payload && msg.payload.event === 'connect') {\n    var currentPlan = flow.get('currentPlan') || 'A1'; // Default to A1\n    return { payload: { plan: currentPlan } };\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 410,
    "y": 140,
    "wires": [
        [
            "plan_highlighter"
        ]
    ]
},
{
    "id": "plan_button_logic",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Plan Button Logic",
    "func": "// Extract plan and mode from button payload\nvar planData = msg.payload;\n\nif (planData && planData.plan) {\n    // Forward both plan and mode to MQTT prepare\n    msg.payload = {\n        plan: planData.plan,\n        mode: planData.mode || 'live' // Default to live mode\n    };\n    return msg;\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 870,
    "y": 180,
    "wires": [
        [
            "plan_mqtt_prepare",
            "plan_broadcast_out"
        ]
    ]
},
{
    "id": "plan_startup_init",
    "type": "inject",
    "z": "sculpture_dashboard",
    "name": "Initialize with Default Plan",
    "props": [
        {
            "p": "payload"
        }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 2,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 60,
    "wires": [["plan_startup_default"]]
},
{
    "id": "plan_startup_default",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Set Default Plan on Startup",
    "func": "// Set default plan on startup - server-agent will publish actual plan via MQTT\nnode.warn('Setting default plan A1 on startup - waiting for MQTT updates from server-agent');\nreturn {\n    payload: {\n        plan: 'A1'\n    },\n    topic: 'plan/startup'\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 420,
    "y": 60,
    "wires": [["plan_highlighter"]]
} 