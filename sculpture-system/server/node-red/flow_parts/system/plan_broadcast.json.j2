{
    "id": "plan_mqtt_prepare",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Prepare MQTT Message",
    "func": "// Prepare MQTT message for server-agent and pi-agents\nvar plan = msg.payload.plan;\nvar mode = msg.payload.mode || 'live';\n\n// Validate plan\nvar validPlans = ['A1', 'A2', 'B1', 'B2', 'B3', 'C', 'D'];\nvar validModes = ['live', 'local'];\n\nif (!validPlans.includes(plan)) {\n    node.error(`Invalid plan: ${plan}`);\n    return null;\n}\n\nif (!validModes.includes(mode)) {\n    node.error(`Invalid mode: ${mode}`);\n    return null;\n}\n\n// Prepare MQTT message with both plan and mode\n// Explicitly stringify the JSON payload for MQTT\nmsg.payload = JSON.stringify({\n    plan: plan,\n    mode: mode\n});\nmsg.topic = 'system/broadcast';\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`Setting plan ${plan} (${mode} mode)...`});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1080,
    "y": 80,
    "wires": [["plan_mqtt_out", "plan_mqtt_response"]]
},
{
    "id": "plan_mqtt_out",
    "type": "mqtt out",
    "z": "sculpture_dashboard",
    "name": "Broadcast Plan via MQTT",
    "topic": "",
    "qos": "0",
    "retain": "false",
    "broker": "mqtt_broker",
    "x": 1300,
    "y": 80,
    "wires": []
},
{
    "id": "plan_mqtt_response",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Handle MQTT Response",
    "func": "// Since MQTT is fire-and-forget, we simulate success\n// Parse the JSON payload to get plan and mode\nvar data = JSON.parse(msg.payload);\nvar plan = data.plan;\nvar mode = data.mode;\n\nnode.status({fill:\"green\",shape:\"dot\",text:`Plan ${plan} (${mode}) sent via MQTT`});\n\n// Send success message for UI feedback\nvar successMsg = {\n    payload: `Plan ${plan} (${mode} mode) sent via MQTT`,\n    topic: 'plan/response'\n};\n\n// Also send plan status for button highlighting\nvar statusMsg = {\n    payload: {\n        plan: plan,\n        mode: mode\n    },\n    topic: 'plan/status'\n};\n\nreturn [successMsg, statusMsg];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1480,
    "y": 80,
    "wires": [["plan_ui_feedback"], ["plan_status_update"]]
},
{
    "id": "plan_ui_feedback",
    "type": "ui_toast",
    "z": "sculpture_dashboard",
    "position": "top right",
    "displayTime": "3",
    "highlight": "",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "className": "",
    "name": "Plan Change Feedback",
    "x": 1700,
    "y": 60,
    "wires": []
},
{
    "id": "plan_status_update",
    "type": "link out",
    "z": "sculpture_dashboard",
    "name": "plan_status_to_highlighter",
    "mode": "link",
    "links": ["plan_highlighter"],
    "x": 1700,
    "y": 100,
    "wires": []
},
{
    "id": "plan_broadcast_out",
    "type": "link out",
    "z": "sculpture_dashboard",
    "name": "plan_broadcast_out",
    "mode": "link",
    "links": [],
    "x": 1180,
    "y": 120,
    "wires": []
},
{
    "id": "plan_status_listener",
    "type": "mqtt in",
    "z": "sculpture_dashboard",
    "name": "Plan Status from Server",
    "topic": "system/plan",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt_broker",
    "x": 900,
    "y": 200,
    "wires": [["plan_status_from_mqtt"]]
},
{
    "id": "plan_status_from_mqtt",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Handle Plan Status from MQTT",
    "func": "// Receive plan status updates from server-agent\nif (msg.payload && msg.payload.plan) {\n    var currentPlan = msg.payload.plan;\n    \n    // Update button highlights with current plan\n    return {\n        payload: {\n            plan: currentPlan\n        },\n        topic: 'plan/mqtt_status'\n    };\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1180,
    "y": 200,
    "wires": [["plan_status_update"]]
} 