{% for sculpture_id in [1, 2, 3] %}
{
    "id": "cpu_gauge_{{ sculpture_id }}",
    "type": "ui_gauge",
    "z": "sculpture_dashboard",
    "name": "CPU {{ sculpture_id }}",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 6,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "CPU %",
    "label": "%",
    "format": "{% raw %}{{value | number:1}}{% endraw %}",
    "min": 0,
    "max": "100",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "50",
    "seg2": "80",
    "x": 410,
    "y": 360,
    "wires": []
},
{
    "id": "temp_gauge_{{ sculpture_id }}",
    "type": "ui_gauge",
    "z": "sculpture_dashboard",
    "name": "Temperature {{ sculpture_id }}",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 7,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Temperature",
    "label": "Â°C",
    "format": "{% raw %}{{value | number:1}}{% endraw %}",
    "min": 0,
    "max": "85",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "60",
    "seg2": "75",
    "x": 420,
    "y": 400,
    "wires": []
},
{
    "id": "sculpture{{ sculpture_id }}_mic_level",
    "type": "ui_gauge",
    "z": "sculpture_dashboard",
    "name": "Mic {{ sculpture_id }}",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 8,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Microphone Level",
    "label": "dB",
    "format": "{% raw %}{{value | number:1}}{% endraw %}",
    "min": -60,
    "max": 0,
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": -20,
    "seg2": -10,
    "x": 450,
    "y": 480,
    "wires": []
},
{
    "id": "sculpture{{ sculpture_id }}_output_level",
    "type": "ui_gauge",
    "z": "sculpture_dashboard",
    "name": "Output {{ sculpture_id }}",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 9,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Output Level",
    "label": "dB",
    "format": "{% raw %}{{value | number:1}}{% endraw %}",
    "min": -60,
    "max": 0,
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": -20,
    "seg2": -10,
    "x": 430,
    "y": 520,
    "wires": []
},
{
    "id": "status_parse_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Parse Status {{ sculpture_id }}",
    "func": "var data = msg.payload;\nflow.set('sculpture_{{ sculpture_id }}_status', data);\n\nvar mode_val = data.mode === 'live' ? 'Live' : 'Local';\nvar is_muted = data.is_muted === undefined ? false : data.is_muted;\n\n// Extract plan information for highlighting\nvar planMsg = null;\nif (data.plan) {\n    planMsg = {payload: {plan: data.plan}};\n}\n\nreturn [\n    {payload: data.cpu, topic: \"cpu\"},\n    {payload: data.temp, topic: \"temp\"},\n    {payload: mode_val, topic: \"mode_status\"},\n    {payload: data.mic, topic: \"mic_level\"},\n    {payload: data.output, topic: \"output_level\"},\n    {payload: is_muted, topic: \"mute_status\"},\n    {payload: data.mode},\n    planMsg\n];",
    "outputs": 8,
    "noerr": 0,
    "x": 240,
    "y": 420,
    "wires": [
        ["cpu_gauge_{{ sculpture_id }}"],
        ["temp_gauge_{{ sculpture_id }}"],
        ["sculpture{{ sculpture_id }}_mode"],
        ["sculpture{{ sculpture_id }}_mic_level"],
        ["sculpture{{ sculpture_id }}_output_level"],
        ["sculpture{{ sculpture_id }}_mute_state"],
        ["load_track_button_state_{{ sculpture_id }}", "sculpture{{ sculpture_id }}_restart_player_live"],
        ["plan_status_from_sculpture_{{ sculpture_id }}"]
    ]
},
{
    "id": "load_track_button_state_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Update Load Button State {{ sculpture_id }}",
    "func": "msg.mode = msg.payload;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 740,
    "wires": [["load_track_button_{{ sculpture_id }}"]]
},
{
    "id": "plan_status_from_sculpture_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Plan Status from Sculpture {{ sculpture_id }}",
    "func": "// Only process messages that contain plan information\nif (msg && msg.payload && msg.payload.plan) {\n    // Store the plan in flow context for persistence\n    flow.set('currentPlan', msg.payload.plan);\n    \n    // Forward to plan highlighter with the expected format\n    return {payload: {plan: msg.payload.plan}};\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 450,
    "y": 780,
    "wires": [["plan_highlighter"]]
}{% if not loop.last %},{% endif %}
{% endfor %} 