{% for sculpture_id in [1, 2, 3] %}
{
    "id": "track_selector_{{ sculpture_id }}",
    "type": "ui_dropdown",
    "z": "sculpture_dashboard",
    "name": "Samples/Playlists {{ sculpture_id }}",
    "label": "Samples/Playlists",
    "tooltip": "Select a sample or playlist to play on sculpture {{ sculpture_id }}",
    "place": "Select sample or playlist",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [],
    "payload": "",
    "topic": "",
    "x": 190,
    "y": 660,
    "wires": [["store_selected_track_{{ sculpture_id }}"]]
},
{
    "id": "load_track_button_{{ sculpture_id }}",
    "type": "ui_template",
    "z": "sculpture_dashboard",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "name": "Load Track/Playlist Button",
    "order": 5,
    "width": 6,
    "height": 1,
    "format": "{% raw %}<md-button class=\"md-raised\" ng-disabled=\"msg.mode === 'live'\" ng-style=\"{'opacity': msg.mode === 'live' ? 0.4 : 1.0}\" ng-click=\"send({payload: ''})\"><i class=\"fa fa-play\"></i> LOAD CONTENT</md-button>{% endraw %}",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "resendOnRefresh": false,
    "templateScope": "local",
    "x": 180,
    "y": 700,
    "wires": [["prepare_load_track_cmd_{{ sculpture_id }}"]]
},
{
    "id": "prepare_load_track_cmd_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Prepare Load Track/Playlist Command {{ sculpture_id }}",
    "func": "var selectedItem = flow.get('selected_track_{{ sculpture_id }}');\nif (!selectedItem) {\n    node.warn('No track or playlist selected for sculpture {{ sculpture_id }}.');\n    return null;\n}\n\n// selectedItem is now just the name (string)\nmsg.payload = {\n    \"mode\": \"local\",\n    \"track\": selectedItem\n};\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 430,
    "y": 700,
    "wires": [["mqtt_out_{{ sculpture_id }}"]]
},
{
    "id": "store_selected_track_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Store Selected Sample/Playlist {{ sculpture_id }}",
    "func": "// Store only the value string, not the object\nif (msg.payload && msg.payload.value) {\n    flow.set('selected_track_{{ sculpture_id }}', msg.payload.value);\n} else {\n    flow.set('selected_track_{{ sculpture_id }}', msg.payload);\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 660,
    "wires": [[]]
},
{
    "id": "tracks_in_{{ sculpture_id }}",
    "type": "mqtt in",
    "z": "sculpture_dashboard",
    "name": "Tracks and Playlists for {{ sculpture_id }}",
    "topic": "sculpture/{{ sculpture_id }}/tracks",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt_broker",
    "x": 120,
    "y": 620,
    "wires": [["debug_tracks_mqtt_{{ sculpture_id }}", "simple_format_{{ sculpture_id }}"]]
},
{
    "id": "debug_tracks_mqtt_{{ sculpture_id }}",
    "type": "debug",
    "z": "sculpture_dashboard",
    "name": "Debug Tracks MQTT {{ sculpture_id }}",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 350,
    "y": 580,
    "wires": [["format_tracks_{{ sculpture_id }}"]]
},
{
    "id": "format_tracks_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Format Tracks/Playlists {{ sculpture_id }}",
    "func": "// Very simple - just convert array of strings to dropdown options\nvar items = msg.payload;\nvar options = [];\n\nnode.warn('Processing ' + items.length + ' items');\n\nif (Array.isArray(items)) {\n    items.forEach(function(item, index) {\n        if (typeof item === 'string') {\n            options.push({\n                label: item,\n                value: item\n            });\n            node.warn('Added: ' + item);\n        } else {\n            node.warn('Skipping non-string item at index ' + index + ': ' + JSON.stringify(item));\n        }\n    });\n}\n\nnode.warn('Final options count: ' + options.length);\nmsg.options = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 330,
    "y": 620,
    "wires": [["track_selector_{{ sculpture_id }}", "debug_format_output_{{ sculpture_id }}"]]
},
{
    "id": "simple_format_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Simple Format {{ sculpture_id }}",
    "func": "// Send options directly to dropdown\nvar items = msg.payload;\n\nif (Array.isArray(items)) {\n    node.warn('Sending ' + items.length + ' options to dropdown: ' + JSON.stringify(items));\n    msg.options = items; // Direct assignment\n    msg.payload = items[0] || ''; // Set first item as default selection\n    return msg;\n} else {\n    node.warn('Invalid payload - not an array: ' + JSON.stringify(items));\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 300,
    "y": 550,
    "wires": [["track_selector_{{ sculpture_id }}"]]
},
{
    "id": "debug_format_output_{{ sculpture_id }}",
    "type": "debug",
    "z": "sculpture_dashboard",
    "name": "Debug Format Output {{ sculpture_id }}",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "options",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 580,
    "wires": []
}{% if not loop.last %},{% endif %}
{% endfor %}
