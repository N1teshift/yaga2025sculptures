{% for sculpture_id in [1, 2, 3] %}
{
    "id": "track_selector_{{ sculpture_id }}",
    "type": "ui_dropdown",
    "z": "sculpture_dashboard",
    "name": "Samples/Playlists {{ sculpture_id }}",
    "label": "Samples/Playlists",
    "tooltip": "Select a sample or playlist to play on sculpture {{ sculpture_id }}",
    "place": "Select sample or playlist",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [],
    "payload": "",
    "topic": "",
    "x": 190,
    "y": 660,
    "wires": [["store_selected_track_{{ sculpture_id }}"]]
},
{
    "id": "load_track_button_{{ sculpture_id }}",
    "type": "ui_template",
    "z": "sculpture_dashboard",
    "group": "ui_group_sculpture{{ sculpture_id }}",
    "name": "Load Track/Playlist Button",
    "order": 5,
    "width": 6,
    "height": 1,
    "format": "{% raw %}<md-button class=\"md-raised\" ng-disabled=\"msg.mode === 'live'\" ng-style=\"{'opacity': msg.mode === 'live' ? 0.4 : 1.0}\" ng-click=\"send({payload: ''})\"><i class=\"fa fa-play\"></i> LOAD CONTENT</md-button>{% endraw %}",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "resendOnRefresh": false,
    "templateScope": "local",
    "x": 180,
    "y": 700,
    "wires": [["prepare_load_track_cmd_{{ sculpture_id }}"]]
},
{
    "id": "prepare_load_track_cmd_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Prepare Load Track/Playlist Command {{ sculpture_id }}",
    "func": "var selectedItem = flow.get('selected_track_{{ sculpture_id }}');\nif (!selectedItem) {\n    node.warn('No track or playlist selected for sculpture {{ sculpture_id }}.');\n    return null;\n}\n\n// selectedItem is now just the name (string)\nmsg.payload = {\n    \"mode\": \"local\",\n    \"track\": selectedItem\n};\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 430,
    "y": 700,
    "wires": [["mqtt_out_{{ sculpture_id }}"]]
},
{
    "id": "store_selected_track_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Store Selected Sample/Playlist {{ sculpture_id }}",
    "func": "// Store only the value string, not the object\nif (msg.payload && msg.payload.value) {\n    flow.set('selected_track_{{ sculpture_id }}', msg.payload.value);\n} else {\n    flow.set('selected_track_{{ sculpture_id }}', msg.payload);\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 660,
    "wires": [[]]
},
{
    "id": "format_tracks_{{ sculpture_id }}",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Format Tracks/Playlists {{ sculpture_id }}",
    "func": "// Transform the new data structure into dropdown options\nvar items = msg.payload;\nvar options = [];\n\nif (Array.isArray(items)) {\n    items.forEach(function(item) {\n        if (typeof item === 'string') {\n            // Legacy format - just a filename string\n            options.push({\n                label: item,\n                value: item\n            });\n        } else if (item && item.name && item.display_name) {\n            // New format - object with name, type, display_name\n            options.push({\n                label: item.display_name,\n                value: item.name  // Store just the name as value\n            });\n        }\n    });\n}\n\nmsg.options = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 330,
    "y": 620,
    "wires": [["track_selector_{{ sculpture_id }}"]]
}{% if not loop.last %},{% endif %}
{% endfor %}
