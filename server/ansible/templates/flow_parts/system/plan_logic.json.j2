{
    "id": "plan_status_mqtt_in",
    "type": "mqtt in",
    "z": "sculpture_dashboard",
    "name": "Plan Status from Server",
    "topic": "system/plan",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt_broker",
    "x": 180,
    "y": 200,
    "wires": [["plan_highlighter"]]
},
{
    "id": "plan_highlighter",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Plan Highlighter",
    "func": "// Extract plan from server-agent payload\nvar currentPlan = msg.payload.plan;\nif (!currentPlan) return null; // Exit if no plan in payload\n\n// Store the current plan in flow context for persistence\nflow.set('currentPlan', currentPlan);\n\n// Send the current plan to all button state nodes\n// Each output gets the same message with the current plan\nvar stateMsgs = Array(7).fill({payload: currentPlan});\n\nreturn stateMsgs;",
    "outputs": 7,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 370,
    "y": 200,
    "wires": [
        [
            "plan_a1_state"
        ],
        [
            "plan_a2_state"
        ],
        [
            "plan_b1_state"
        ],
        [
            "plan_b2_state"
        ],
        [
            "plan_b3_state"
        ],
        [
            "plan_c_state"
        ],
        [
            "plan_d_state"
        ]
    ]
},
{
    "id": "plan_dashboard_connect",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Send Plan Highlight on Connect",
    "func": "// On dashboard connect, re-broadcast the current plan highlight\nif (msg.payload && msg.payload.event === 'connect') {\n    var currentPlan = flow.get('currentPlan') || 'B1'; // Default to B1\n    return { payload: { plan: currentPlan } };\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 410,
    "y": 140,
    "wires": [
        [
            "plan_highlighter"
        ]
    ]
},
{
    "id": "plan_button_logic",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Plan Button Logic",
    "func": "// Find which button was pressed from the payload (e.g., 'A1', 'B1', etc.)\nvar selectedPlan = msg.payload;\n\nif (selectedPlan) {\n    // Just send the plan - sculptures will determine their own mode\n    msg.payload = { plan: selectedPlan };\n    return msg;\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 870,
    "y": 180,
    "wires": [
        [
            "plan_mqtt_out",
            "plan_broadcast_out"
        ]
    ]
} 