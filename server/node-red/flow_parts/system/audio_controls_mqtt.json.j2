{
    "id": "audio_mqtt_out",
    "type": "mqtt out",
    "z": "sculpture_dashboard",
    "name": "Send Audio Commands",
    "topic": "system/audio/cmd",
    "qos": "0",
    "retain": "false",
    "broker": "mqtt_broker",
    "x": 840,
    "y": 400,
    "wires": []
},
{
    "id": "audio_reset_button",
    "type": "ui_button",
    "z": "sculpture_dashboard",
    "name": "Reset Audio",
    "group": "ui_group_audio",
    "order": 21,
    "width": 12,
    "height": 1,
    "passthru": false,
    "label": "ðŸ”„ Reset to Defaults",
    "tooltip": "Reset all audio processing to default values",
    "color": "white",
    "bgcolor": "#FF9800",
    "icon": "",
    "payload": "reset",
    "payloadType": "str",
    "topic": "system/audio/reset",
    "topicType": "str",
    "x": 200,
    "y": 900,
    "wires": [["audio_reset_format"]]
},
{
    "id": "audio_reset_format",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Format Reset Command",
    "func": "msg.payload = {\"reset\": true};\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 620,
    "y": 900,
    "wires": [["audio_mqtt_out", "audio_reset_delay"]]
},
{
    "id": "audio_reset_delay",
    "type": "delay",
    "z": "sculpture_dashboard",
    "name": "Reset UI Delay",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 820,
    "y": 900,
    "wires": [["audio_reset_set_mode"]]
},
{
    "id": "audio_reset_set_mode",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Set Reset Mode",
    "func": "// Set reset mode to prevent MQTT commands\ncontext.set('audio_reset_mode', true);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 1040,
    "y": 900,
    "wires": [["audio_reset_sliders", "audio_reset_clear_mode"]]
},
{
    "id": "audio_reset_sliders",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Reset Slider Positions",
    "func": "// Send default values directly to sliders\n// This will move sliders but format functions will block MQTT\nconst outputs = [\n    {payload: {{ audio_processing.compress_ratio }}, topic: 'compress_ratio'},\n    {payload: {{ audio_processing.compress_threshold }}, topic: 'compress_threshold'},\n    {payload: {{ audio_processing.attack_time }}, topic: 'attack_time'},\n    {payload: {{ audio_processing.release_time }}, topic: 'release_time'},\n    {payload: {{ audio_processing.highpass_freq }}, topic: 'highpass_freq'},\n    {payload: {{ audio_processing.lowpass_freq }}, topic: 'lowpass_freq'},\n    {payload: {{ audio_processing.delay_time }}, topic: 'delay_time'},\n    {payload: {{ audio_processing.delay_feedback }}, topic: 'delay_feedback'},\n    {payload: {{ audio_processing.gate_threshold }}, topic: 'gate_threshold'},\n    {payload: {{ audio_processing.normalize_target }}, topic: 'normalize_target'}\n];\n\nreturn outputs;",
    "outputs": 10,
    "noerr": 0,
    "x": 1280,
    "y": 900,
    "wires": [
        ["compress_ratio_slider"],
        ["compress_threshold_slider"],
        ["attack_time_slider"],
        ["release_time_slider"],
        ["highpass_freq_slider"],
        ["lowpass_freq_slider"],
        ["delay_time_slider"],
        ["delay_feedback_slider"],
        ["gate_threshold_slider"],
        ["normalize_target_slider"]
    ]
},
{
    "id": "audio_reset_clear_mode",
    "type": "delay",
    "z": "sculpture_dashboard",
    "name": "Clear Reset Mode",
    "pauseType": "delay",
    "timeout": "500",
    "timeoutUnits": "milliseconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1040,
    "y": 960,
    "wires": [["audio_reset_clear_mode_func"]]
},
{
    "id": "audio_reset_clear_mode_func",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Clear Reset Mode Flag",
    "func": "// Clear reset mode to allow normal MQTT commands\ncontext.set('audio_reset_mode', false);\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 1280,
    "y": 960,
    "wires": [[]]
},
{
    "id": "audio_processing_toggle",
    "type": "ui_template",
    "z": "sculpture_dashboard",
    "name": "Audio Processing Toggle",
    "group": "ui_group_audio",
    "order": 22,
    "width": 12,
    "height": 1,
    "format": "{% raw %}<md-button class=\"md-raised\" ng-style=\"{ 'background-color': msg.isEnabled ? '#4CAF50' : '#F44336', 'color': 'white', 'border': msg.isEnabled ? '2px solid #388E3C' : '2px solid #D32F2F', 'width': '100%' }\" ng-click=\"send({payload: !msg.isEnabled})\"><i class=\"fa\" ng-class=\"msg.isEnabled ? 'fa-volume-up' : 'fa-volume-off'\"></i> {{ msg.isEnabled ? 'Audio Processing: ON' : 'Audio Processing: OFF' }}</md-button>{% endraw %}",
    "storeOutMessages": true,
    "fwdInMessages": false,
    "resendOnRefresh": false,
    "templateScope": "local",
    "x": 200,
    "y": 1100,
    "wires": [["audio_processing_format"]]
},
{
    "id": "audio_processing_format",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Format Processing Toggle",
    "func": "msg.payload = {\"processing_toggle\": msg.payload};\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 620,
    "y": 1100,
    "wires": [["audio_mqtt_out"]]
},
{
    "id": "audio_processing_status_in",
    "type": "mqtt in",
    "z": "sculpture_dashboard",
    "name": "Audio Processing Status",
    "topic": "system/audio/status",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt_broker",
    "x": 100,
    "y": 1140,
    "wires": [["audio_processing_state"]]
},
{
    "id": "audio_processing_state",
    "type": "function",
    "z": "sculpture_dashboard",
    "name": "Update Processing State",
    "func": "if (msg.payload.processing_enabled !== undefined) {\n    msg.isEnabled = msg.payload.processing_enabled;\n    return msg;\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 1140,
    "wires": [["audio_processing_toggle"]]
},
{
    "id": "audio_processing_startup",
    "type": "inject",
    "z": "sculpture_dashboard",
    "name": "Request Initial Processing Status",
    "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 2,
    "topic": "system/audio/cmd",
    "payload": "{\"get_processing_status\": true}",
    "payloadType": "json",
    "x": 150,
    "y": 1180,
    "wires": [["audio_mqtt_out"]]
} 